<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[伤风's blog]]></title>
  <link href="http://shellfly.github.com/atom.xml" rel="self"/>
  <link href="http://shellfly.github.com/"/>
  <updated>2012-06-10T00:47:08+08:00</updated>
  <id>http://shellfly.github.com/</id>
  <author>
    <name><![CDATA[shellfly]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SICP 笔记-构造过程抽象]]></title>
    <link href="http://shellfly.github.com/blog/2012/06/08/sicp-note/"/>
    <updated>2012-06-08T20:29:00+08:00</updated>
    <id>http://shellfly.github.com/blog/2012/06/08/sicp-note</id>
    <content type="html"><![CDATA[<p>写这篇笔记并不是代表开始学SICP，而是要先把它放下一阵子。看了大概有一个
月了,第二章还没看完（一个月才一章……），之所以看这么慢有2个原因，一方面这本书对我来
说真的有点难度，从emacs开始知道函数式编程语言，只看过一些简单的介绍和几个
elisp函数，况且这本书不是教编程语言而是很多关于计算过程的理论知识，看到第二章时进度就已经快速递减到0了。
另一个原因是因为暑假快到了，怕时间不够用，就在同一时间看了好几本书，本
以为自己消化得了，结果变成了&#8221;欲速则不达&#8221;。所以得先放下几本了。</p>

<p>下面是笔记的正文</p>

<h3>过程的基本知识</h3>

<ul>
<li>过程</li>
</ul>


<p>在scheme里过程和变量都是由define定义，函数式编程语言里的过程和数据的差
别很小，在很多地方过程也可以和普通数据一样使用，例如作为函数的参数或者
包含在数据结构中。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(define (square x) (* x x))
</span><span class='line'>(square 2)
</span><span class='line'>4</span></code></pre></td></tr></table></div></figure>


<p>稍微复杂点的复合过程</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(define (sum-square a b) 
</span><span class='line'>    (+ (square a) (square b)))
</span><span class='line'>(sum-square 3 4)
</span><span class='line'>25</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>应用序</strong> 和 <strong>正则序</strong></li>
</ul>


<!--more-->


<p>象上面这种复杂的过程，解释器在求解其值时有两种代换模型,采用应用序时，解释器先求出各个参数的值，然后将过程应用于参数，而采用
正则序时，则是先把过程全部展开，最后才求值。lisp采用应用序求值。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(sum-square (+1 2) (- 3 2))
</span><span class='line'>
</span><span class='line'>应有序求值过程：
</span><span class='line'>(sum-square (+1 2) (- 3 2))
</span><span class='line'>(sum-square 3 1)
</span><span class='line'>(+ (square 3) (square 1))
</span><span class='line'>(+ (* 3 3) (* 1 1))
</span><span class='line'>(+ 9 1)
</span><span class='line'>10
</span><span class='line'>
</span><span class='line'>正则序
</span><span class='line'>全部展开：
</span><span class='line'>(+   (square  (+ 1 2))    (square  (- 3 2)) )
</span><span class='line'>    
</span><span class='line'>(+   (* (+1 2) (+1 2))    (* (- 3 2) (- 3 2)))    
</span><span class='line'>归约：
</span><span class='line'>(+ (* 3 3) (* 1 1))
</span><span class='line'>(+ 9 1)
</span><span class='line'>10</span></code></pre></td></tr></table></div></figure>


<p>可以看到不同的代换模型求出来的值都是一样的，只是过程的区别，正则序需要
进行许多重复的计算，不过一些特殊的过程，并不是2种模型都适合的，所以虽
然lisp使用应用序，在一些特殊情况下还是需要正则序来完成计算的。书后面的
练习1.5就是个例子。</p>

<h3>过程产生的计算</h3>

<ul>
<li>递归和迭代</li>
</ul>


<p> 在lisp中 <strong>递归过程</strong> 可以产生 <strong>递归计算过程</strong> 也可以产生 <strong>迭代计算
 过程</strong>，并不需要像结构式语言那样显示借助于循环结构才能写出来迭代的计算过程。</p>

<p> 最简单的递归过程就是计算阶乘的例子,下面这个过程产生的计算是 <strong>线性递归计
 算过程</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(define (factorial n)
</span><span class='line'>     (if (= n 1)
</span><span class='line'>         1
</span><span class='line'>         (* n (factorial (- n 1)))))</span></code></pre></td></tr></table></div></figure>


<p> 迭代的计算过程都是可以用一定的 <strong>状态变量</strong> 描述的计算过程，所以产生
 迭代计算过程的 过程都要在计算中维持几个 状态变量，在计算阶乘的时就可以用维持一个 计数器counter，最大值n和 乘积product来描述，下
 面的过程产生的是 <strong>线性迭代计算过程</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(define (factorial n)
</span><span class='line'>     (define (iter counter product)
</span><span class='line'>         (if (> counter n)
</span><span class='line'>             product
</span><span class='line'>             (iter (+ counter 1) (* counter product))))
</span><span class='line'>     (iter 1 1))</span></code></pre></td></tr></table></div></figure>


<p> <strong>树形递归</strong>计算过程需要更多的计算步奏，使用递归算法计算斐波那契数列产生
 的就是 树形递归计算过程</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(define (fib n)
</span><span class='line'>    (cond ((= n 0) 0)
</span><span class='line'>          ((= n 1) 1)
</span><span class='line'>          (else (+ (fib (- n 1))
</span><span class='line'>                   (fib (- n 2))))))</span></code></pre></td></tr></table></div></figure>


<p> 可以使用产生迭代计算过程的方法来优化过程</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(define (fib n)
</span><span class='line'>    (define (iter a b counter) 
</span><span class='line'>        (if (> counter n)
</span><span class='line'>            b
</span><span class='line'>            (iter (+ a b) a (+counter 1))))
</span><span class='line'>    (iter 1 0 0))</span></code></pre></td></tr></table></div></figure>


<h3>使用高阶函数</h3>

<p>lisp中过程可以当作　<strong>第一级计算元素</strong>，也就是说过程具有这些权利:</p>

<ul>
<li><p>可以用变量命名</p></li>
<li><p>可以做为函数的参数</p></li>
<li><p>可以作为函数的返回值</p></li>
<li><p>可以包含在数据结构中</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>计算：f(x,y)=x(1+xy) + y(1-y) + (1+xy)(1-y)
</span><span class='line'> 利用辅助过程：
</span><span class='line'> (define (f x y)
</span><span class='line'>     (define (f2 a b)
</span><span class='line'>         (+ (* x a)
</span><span class='line'>             (* y b)
</span><span class='line'>              (* ab)))
</span><span class='line'>     (f2 (+ 1 (* x y))
</span><span class='line'>         (- 1 y)))
</span><span class='line'>         
</span><span class='line'> 利用lambda：
</span><span class='line'> (define (f x y)
</span><span class='line'>     ((lambda (a b)
</span><span class='line'>         (+ (* x a)
</span><span class='line'>             (* y b)
</span><span class='line'>             (* ab)))
</span><span class='line'>         (+ 1 (* x y))
</span><span class='line'>         (- 1 y)))
</span><span class='line'>         
</span><span class='line'> 利用let创建局部变量:
</span><span class='line'> (define (f x y)
</span><span class='line'>     (let ((a (+ 1 (* x y)))
</span><span class='line'>          (b (- 1 y)))
</span><span class='line'>          (+ (* x a) 
</span><span class='line'>              (* y b) 
</span><span class='line'>              (* a b))))</span></code></pre></td></tr></table></div></figure>


<h3>自己做的一些练习</h3>

<p>exer1.11:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>递归：
</span><span class='line'>(define (f n)
</span><span class='line'>    (if (&lt; n 3)
</span><span class='line'>        n
</span><span class='line'>        (+ (f (- n 1)
</span><span class='line'>            (* 2 (f (- n 2)))
</span><span class='line'>            (* 3 (f (- n 3)))))))
</span><span class='line'>
</span><span class='line'>迭代：
</span><span class='line'>(define (f n)
</span><span class='line'>    (define (iter a b c counter)
</span><span class='line'>        (if (&lt; counter 0)
</span><span class='line'>            c 
</span><span class='line'>            (iter b c (+ (* 3 a)
</span><span class='line'>                          (* 2 b)
</span><span class='line'>                          c) (- counter 1))))
</span><span class='line'>    (if (&lt; n 3)
</span><span class='line'>        n
</span><span class='line'>        (iter 0 1 2 (- n 3))))</span></code></pre></td></tr></table></div></figure>


<p>exer1.16:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(define (fast-expt b n)
</span><span class='line'>    (define (iter a b n)
</span><span class='line'>        (cond ((= n 0) a)
</span><span class='line'>              ((even? n) (iter a (square b) (/ n 2)))
</span><span class='line'>              (else (iter (* a b) b (- n 1)))))
</span><span class='line'>    (iter 1 b n))</span></code></pre></td></tr></table></div></figure>


<p>           <br/>
exer1.17:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(define (fast-product a b)
</span><span class='line'>    (cond ((= b 0) 0)
</span><span class='line'>          ((even? b) (double (fast-product a (/ b 2))))
</span><span class='line'>          (else (+ a (fast-product a (- b 1))))))</span></code></pre></td></tr></table></div></figure>


<p>         <br/>
exer1.18:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(define (fast-product a b)
</span><span class='line'>    (define (iter n a b)
</span><span class='line'>        (cond ((= b 0) n)
</span><span class='line'>              ((even? b) (iter n (double a) (/ b 2)))
</span><span class='line'>              (else (iter (+ n a) a (- b 1)))))
</span><span class='line'>     (iter 0 a b))</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[new start]]></title>
    <link href="http://shellfly.github.com/blog/2012/06/06/new-start/"/>
    <updated>2012-06-06T23:26:00+08:00</updated>
    <id>http://shellfly.github.com/blog/2012/06/06/new-start</id>
    <content type="html"><![CDATA[<p>就像现在所显示的，原来使用免费空间搭建的wordpress博客没有了，告诉我需要付费才能弄回来原来的空间。其实000webhost用着挺不错的，半年多了也没出
什么问题，虽然数据库有备份，但想想还是算了，从新开始也不错。之前因为电
脑出了点问题，修了很多天才弄好而且电脑被全盘格式化了，这次又来这个，貌似人品还没攒够？</p>

<p>shellfly.org这个域名要到10月份才到期，之后也不打算在续费了，所以以后如果想再来的话（虽然现在没什么东西，但
还是希望有人来看。。）就直接用shellfly.github.com吧。github真是个好东
西。</p>

<p>之前虽然一直想看看git的书，但一直没找到机会，反而这次搭建博客把git弄懂了一
点，理论上虽然还差一点，但简单的操作都ok了。ruby之前没接触过，所以今天在图书馆也借了本ruby的书，markdown也没用
过，这第一篇文章估计也不怎么好看，没什么格式，博客落下很久了，先写点试
试，好久没写东西了。前几天考完了软件设计师，感觉挺简单的（希望不是我感觉错误）等着拿证书，好像要等半年才
能出来。虽然这种考试看上去没什么用，不过乘此机会好好看了下算法和数据结构，还看了点编译原理，收获还是有的。</p>

<p>6月7号，今天正好是高考的日子，三年的时间就这么过去了，好像越长大，时间
过的越快？如果大二的时候没有下定决心不在玩游戏，不知道现在的自己是一副
什么样子。发现自己写文章果然没什么天赋啊，跳变太多了 看来大脑里都是数字信
号啊 什么时候能弄个D/A转换器 转换成模拟信号就好了…… 不管怎样，找到新起点的感觉也是不错的</p>
]]></content>
  </entry>
  
</feed>
