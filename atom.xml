<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[伤风's blog]]></title>
  <link href="http://shellfly.github.com/atom.xml" rel="self"/>
  <link href="http://shellfly.github.com/"/>
  <updated>2012-10-02T22:33:40+08:00</updated>
  <id>http://shellfly.github.com/</id>
  <author>
    <name><![CDATA[shellfly]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[小7试上线]]></title>
    <link href="http://shellfly.github.com/blog/2012/10/02/7alpha/"/>
    <updated>2012-10-02T21:30:00+08:00</updated>
    <id>http://shellfly.github.com/blog/2012/10/02/7alpha</id>
    <content type="html"><![CDATA[<h4>起止</h4>

<p>8月21号建的repo，当时就写了几行用户验证的代码，到今天差不多40天的样
子，算是有了个样子，相册、活动、广播，基本的功能都实现了，也加上了在线
拍照、编辑照片和幻灯片效果。暂时不准备在改了，这段时间一直在看django，其
他东西都落下了。一本算法的书，暑假看了一半，结果因为找工作和写这个网站，
到现在还没看完，准备用剩下的时间把他补完。</p>

<h4>致谢</h4>

<p>第一次写网站，很多地方不懂，感谢@fleuria君提供的帮助。感谢@瑾和@冬提供
的首页的照片。还有v2ex上几个朋友的意见。</p>

<h4><a href="http://pk7lover.com" target="_blank">pk7lover.com</a></h4>

<h5>pk7lover == picture lover</h5>

<p>pk7lover是一个在线分享照片的网站,如果你用过flickr,那么就一定不会对
pk7lover感到陌生. 在这里你可以创建自己的相册，上传喜爱的照片，并把照片
和朋友、家人一起分享.</p>

<!--more-->


<h5>左邻右舍</h5>

<p>在小7里，你可以对你喜欢的人加关注，你关注的人会出现 在左邻里，
关注你的人在右舍中.在首页的广播里会出现所有你和你关注的人在小7里的最新
信息参加的活 动、上传照片等等.你也可以在对关注的人分组，分组之后你就可以对相册设置相应的权限，这样只有指定的人才能看到你上
传的照片</p>

<h5>活动</h5>

<p>在这里你可以创建自己的主题活动，让别人来参加。关注你的人会自动得到活
动创建的通知，其他人可以在最新活动中看到。任何有创意的照片，有意思的想法，都可以用来别人一起分享， 活动的目的就是大家一起参与，一起玩乐.</p>

<h5>在线相簿</h5>

<p>支持在线拍照、编辑照片，以幻灯片方式浏览照片</p>

<h5>FAQ</h5>

<ul>
<li><p>为什么我在活动里只能上传一张照片?</p>

<p>这是为了让活动更真实一点，每个人只能上传一件作品，对同一张照 片也只能喜欢一次.</p></li>
<li><p>为什么我的浏览器不能使用多文件上传?</p>

<p>多文件上传需要flash能够正常工作，检查你的浏览器中flash是 否工作最简单的方式就是打开一个视频网站，如果视频无法正常播发， 可以依照提示安装flash.</p></li>
<li><p>字体太大?链接无效?</p>

<p>对前端不是很熟，直接用的bootstrap框架，而且开发时一直用chrome调试，所以为了得到最好的浏览体验，请使用chrome或者firefox浏览小 7.如果你有兴趣帮忙改改那就更好了:D</p></li>
</ul>


<p>如果在小7中发现任何问题或是有什么建议，欢迎在我的博客留言或者给我发封邮件,地址是shell0fly#gmail.com</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django集成uploadify]]></title>
    <link href="http://shellfly.github.com/blog/2012/09/14/django-uploadify-integrate/"/>
    <updated>2012-09-14T09:10:00+08:00</updated>
    <id>http://shellfly.github.com/blog/2012/09/14/django-uploadify-integrate</id>
    <content type="html"><![CDATA[<p><strong>django 1.4 ;uploadify 3.1</strong></p>

<p>uploadify实现多文件上传很简单，一个js，一个css和一个swf就行了。不过要想在Django里使用flash上传文件，还得动点手脚才行。</p>

<p>问题就出<a href="http://www.uploadify.com/documentation/uploadify/using-sessions-with-uploadify/" target=_blank>在这</a>,使用flash无法传递cookies到服务端,
服务端程序也就无法验证上传者的身份，如果在视图函数(views)上加了<strong>@login_required</strong>,请求就会一直被重定向，然后uploadify得到的就是一堆http 302或者IO error.</p>

<p>上面的链接里已经指出了问题并给了解决方法，但那是针对php的，django要麻烦的多，当然有个不是办法的办法，就是不用@login_required，这样不需要验证就能上传文件了&#8230;</p>

<p>既然没有cookies，那就需要手动添加cookies，Django的middleware正好适合干这事，uploaidfy的初始化选项里有个<strong>formData</strong>可以用来post数据，把要设置的cookies值，放在这里，
然后自定义一个middleware在<strong>process_requrest()</strong>里构造自己需要的cookies。</p>

<p>   一个小问题:django 1.4里的session cookies默认都有httponly选项，无法用js脚本获得这个值,还需要一个可以获得的sessionid</p>

<!-- more -->


<p>总结一下:</p>

<ol>
<li><p>在视图函数里手动建立一个没有httponly选项的sessionid，值和浏览器里的<strong>sessionid</strong>一样</p></li>
<li><p>在uploadify初始化里传递必要的参数</p></li>
<li><p>自定义一个middleware，在其中构造需要的cookies,自定义的middleware要放在settings.py里SessionMiddleware的前面</p></li>
</ol>


<figure class='code'><figcaption><span>views.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">upload_sessionid</span><span class="o">=</span><span class="n">request</span><span class="o">.</span><span class="n">COOKIES</span><span class="p">[</span><span class="s">&#39;sessionid&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="n">response</span><span class="o">.</span><span class="n">set_cookie</span><span class="p">(</span><span class="s">&#39;upload_sessionid&#39;</span><span class="p">,</span><span class="n">upload_sessionid</span><span class="p">,</span><span class="n">httponly</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'><span class="k">return</span> <span class="n">response</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>main.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>   <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#file_upload&#39;</span><span class="p">).</span><span class="nx">uploadify</span><span class="p">({</span>
</span><span class='line'>        <span class="s1">&#39;swf&#39;</span>      <span class="o">:</span> <span class="s1">&#39;/static/uploadify/uploadify.swf&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;uploader&#39;</span> <span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="c1">// 设置为空，则为当前url</span>
</span><span class='line'>        <span class="c1">// Put your options here</span>
</span><span class='line'>        <span class="s1">&#39;fileTypeExts&#39;</span><span class="o">:</span><span class="s1">&#39;*.jpg;*.bmp;*.png&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;formData&#39;</span><span class="o">:</span><span class="p">{</span><span class="s1">&#39;upload_sessionid&#39;</span><span class="o">:</span><span class="nx">$</span><span class="p">.</span><span class="nx">cookie</span><span class="p">(</span><span class="s1">&#39;upload_sessionid&#39;</span><span class="p">),</span><span class="s1">&#39;selected_album&#39;</span><span class="o">:</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.selected_data&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">()},</span>
</span><span class='line'>        <span class="s1">&#39;multi&#39;</span><span class="o">:</span><span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;auto&#39;</span><span class="o">:</span><span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;buttonText&#39;</span><span class="o">:</span><span class="s1">&#39;添加照片&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;height&#39;</span><span class="o">:</span><span class="mi">21</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;width&#39;</span><span class="o">:</span><span class="mi">81</span><span class="p">,</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>middleware.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'> <span class="kn">from</span> <span class="nn">django.conf</span> <span class="kn">import</span> <span class="n">settings</span>
</span><span class='line'>
</span><span class='line'> <span class="k">class</span> <span class="nc">UploadifyMiddleware</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">process_request</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">request</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">&#39;POST&#39;</span> <span class="ow">and</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="o">.</span><span class="n">has_key</span><span class="p">(</span><span class="s">&#39;upload_sessionid&#39;</span><span class="p">):</span>
</span><span class='line'>            <span class="n">request</span><span class="o">.</span><span class="n">COOKIES</span><span class="p">[</span><span class="n">settings</span><span class="o">.</span><span class="n">SESSION_COOKIE_NAME</span><span class="p">]</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="p">[</span><span class="s">&#39;upload_sessionid&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>settings.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">MIDDLEWARE_CLASSES</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&#39;django.middleware.common.CommonMiddleware&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;albums.middleware.UploadifyMiddleware&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;django.contrib.sessions.middleware.SessionMiddleware&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样应该就没问题了，不过视图函数还是要加上<strong>@csrf_exempt</strong>不然会出现403错误，我试着用同样的方法设置了csrftoken的cookies，不过貌似不起什么作用，先这样用着了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[django自定义gravatar头像大小]]></title>
    <link href="http://shellfly.github.com/blog/2012/09/12/django-gravatar-resize/"/>
    <updated>2012-09-12T23:51:00+08:00</updated>
    <id>http://shellfly.github.com/blog/2012/09/12/django-gravatar-resize</id>
    <content type="html"><![CDATA[<p>Django可以很方便的集成gravatar，官方教程<a href="https://en.gravatar.com/site/implement/images/django/" target="_blank">在这</a>
就是自定义一个<strong>template tag</strong>，在模板里加载使用就行了。</p>

<p>给的代码是只有一个默认尺寸，把代码稍微改了以下，可以添加一个尺寸参数，如果没有提供第三个参数，默认是32.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">django</span> <span class="kn">import</span> <span class="n">template</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">urllib</span><span class="o">,</span> <span class="nn">hashlib</span>
</span><span class='line'>
</span><span class='line'><span class="n">register</span> <span class="o">=</span> <span class="n">template</span><span class="o">.</span><span class="n">Library</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">GravatarUrlNode</span><span class="p">(</span><span class="n">template</span><span class="o">.</span><span class="n">Node</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">email</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">32</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">email</span> <span class="o">=</span> <span class="n">template</span><span class="o">.</span><span class="n">Variable</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">size</span> <span class="o">=</span> <span class="n">size</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">context</span><span class="p">):</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="n">email</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">email</span><span class="o">.</span><span class="n">resolve</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span><span class='line'>        <span class="k">except</span> <span class="n">template</span><span class="o">.</span><span class="n">VariableDoesNotExist</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c">#default = &quot;http://www.gravatar.com/avatar/00000000000000000000000000000000?d=mm&amp;s=%s&quot; % self.size</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">gravatar_url</span> <span class="o">=</span> <span class="s">&quot;http://www.gravatar.com/avatar/&quot;</span> <span class="o">+</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">md5</span><span class="p">(</span><span class="n">email</span><span class="o">.</span><span class="n">lower</span><span class="p">())</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">()</span> <span class="o">+</span> <span class="s">&quot;?&quot;</span>
</span><span class='line'>        <span class="n">gravatar_url</span> <span class="o">+=</span> <span class="n">urllib</span><span class="o">.</span><span class="n">urlencode</span><span class="p">({</span><span class="s">&#39;d&#39;</span><span class="p">:</span><span class="s">&#39;mm&#39;</span><span class="p">,</span> <span class="s">&#39;s&#39;</span><span class="p">:</span><span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">size</span><span class="p">)})</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">gravatar_url</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@register.tag</span>
</span><span class='line'><span class="k">def</span> <span class="nf">gravatar_url</span><span class="p">(</span><span class="n">parser</span><span class="p">,</span> <span class="n">token</span><span class="p">):</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">tag_name</span><span class="p">,</span> <span class="n">email</span> <span class="p">,</span><span class="n">size</span> <span class="o">=</span> <span class="n">token</span><span class="o">.</span><span class="n">split_contents</span><span class="p">()</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">ValueError</span><span class="p">:</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="n">tag_name</span><span class="p">,</span><span class="n">email</span> <span class="o">=</span> <span class="n">token</span><span class="o">.</span><span class="n">split_contents</span><span class="p">()</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">ValueError</span><span class="p">:</span>
</span><span class='line'>            <span class="k">raise</span> <span class="n">template</span><span class="o">.</span><span class="n">TemplateSyntaxError</span><span class="p">,</span> <span class="s">&quot;useage:</span><span class="si">%r</span><span class="s"> email [size]&quot;</span> <span class="o">%</span> <span class="n">token</span><span class="o">.</span><span class="n">contents</span><span class="o">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">GravatarUrlNode</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">GravatarUrlNode</span><span class="p">(</span><span class="n">email</span><span class="p">,</span><span class="n">size</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[javascript 闭包中的变量]]></title>
    <link href="http://shellfly.github.com/blog/2012/08/09/about-javascript-closure/"/>
    <updated>2012-08-09T14:59:00+08:00</updated>
    <id>http://shellfly.github.com/blog/2012/08/09/about-javascript-closure</id>
    <content type="html"><![CDATA[<p>闭包，简单点说就是一个function加上一个environment，这个environment中不仅包
含了function的局部变量，也包含了外部变量，这样看来所有的javascript函数都是一
个闭包。有趣的地方就在于当用到嵌套函数时，这些environment中外部变量有些特殊，他们包含上层函数的局部变量。</p>

<p>在练习一个书上的例子时遇到了一个问题，这个问题之前在看《python学习手册》
的时候也碰到过，当时没想明白，不过这次明白了。</p>

<p><strong>一个闭包environment中的外部变量是引用而不是拷贝</strong>，例如当声明一个嵌
套函数时，有个外部变量a=1,当这个嵌套函数实际被调用时，a可能已经变成了2;</p>

<p>下面就是最近做练习写的函数,遍历网页中的超链接，如果class==popup，就给
onclick事件放置一个处理函数。</p>

<!--more-->


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">popUp</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">window</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span><span class="s2">&quot;doubanclaime07dd62c1ee49ef3&quot;</span><span class="p">,</span><span class="s2">&quot;width=160,height=160&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">preparelinks</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>   <span class="kd">var</span> <span class="nx">links</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span> <span class="o">&lt;</span><span class="nx">links</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">links</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s2">&quot;class&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="s2">&quot;popup&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">links</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">popUp</span><span class="p">(</span><span class="nx">links</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s2">&quot;href&quot;</span><span class="p">));</span>
</span><span class='line'>                <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>看样子好像没什么问题，但是并不能达到需要的效果，用浏览器调试可议发现
getAttribute是undefined的，问题就在于嵌套函数使用了<strong>变量i</strong>，如果在嵌套函
数中加一句<strong>alert(i)</strong> 就会发现，函数执行时i总是等于links的总长度，因
为闭包中包含的是外部变量的引用，在循环中i最后已经变成了length（数组从
下标0开始，lenght已经越界了），在onclick触发函数时，links[i]就是未定义
的。</p>

<p>这个问题有2个解决办法，一个是使用一个单独的变量保存for循环时的
links[i],然后在嵌套函数中使用这个变量。或者在嵌套函数中不使用links数组，
直接使用this关键字就能解决。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>   <span class="nx">popUp</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s2">&quot;href&quot;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面说道《python学习手册》也是我的python入门书，那时候看到函数那章,很
多高级用法平时都用不到，所以也没注意，这次倒是弄明白了一点。也是一个类
似的例子，在循环中创建闭包,记得那里好像叫做工厂函数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">makefunc</span><span class="p">():</span>
</span><span class='line'>    <span class="n">funcs</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
</span><span class='line'>        <span class="n">funcs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span><span class="n">x</span><span class="o">*</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">funcs</span>
</span><span class='line'>
</span><span class='line'><span class="n">funcs</span> <span class="o">=</span> <span class="n">makefunc</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c">#下面3个函数调用都返回4 而不是0 2 4</span>
</span><span class='line'><span class="n">funcs</span><span class="p">[</span><span class="mi">0</span><span class="p">](</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="n">funcs</span><span class="p">[</span><span class="mi">1</span><span class="p">](</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="n">funcs</span><span class="p">[</span><span class="mi">2</span><span class="p">](</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>python中提供的解决办法也是使用一个变量记录i的值，这样就不用和其他闭包
共享同一个i，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">funcs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span><span class="n">i</span><span class="o">=</span><span class="n">i</span><span class="p">:</span><span class="n">x</span><span class="o">*</span><span class="n">i</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SICP 笔记-构造过程抽象]]></title>
    <link href="http://shellfly.github.com/blog/2012/06/08/sicp-note/"/>
    <updated>2012-06-08T20:29:00+08:00</updated>
    <id>http://shellfly.github.com/blog/2012/06/08/sicp-note</id>
    <content type="html"><![CDATA[<p>写这篇笔记并不是代表开始学SICP，而是要先把它放下一阵子。看了大概有一个
月了,第二章还没看完（一个月才一章……），之所以看这么慢有2个原因，一方面这本书对我来
说真的有点难度，从emacs开始知道函数式编程语言，只看过一些简单的介绍和几个
elisp函数，况且这本书不是教编程语言而是很多关于计算过程的理论知识，看到第二章时进度就已经快速递减到0了。
另一个原因是因为暑假快到了，怕时间不够用，就在同一时间看了好几本书，本
以为自己消化得了，结果变成了&#8221;欲速则不达&#8221;。所以得先放下几本了。</p>

<p>下面是笔记的正文</p>

<h3>过程的基本知识</h3>

<ul>
<li>过程</li>
</ul>


<p>在scheme里过程和变量都是由define定义，函数式编程语言里的过程和数据的差
别很小，在很多地方过程也可以和普通数据一样使用，例如作为函数的参数或者
包含在数据结构中。</p>

<!--more-->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(define (square x) (* x x))
</span><span class='line'>(square 2)
</span><span class='line'>4</span></code></pre></td></tr></table></div></figure>


<p>稍微复杂点的复合过程</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(define (sum-square a b) 
</span><span class='line'>    (+ (square a) (square b)))
</span><span class='line'>(sum-square 3 4)
</span><span class='line'>25</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>应用序</strong> 和 <strong>正则序</strong></li>
</ul>


<p>象上面这种复杂的过程，解释器在求解其值时有两种代换模型,采用应用序时，解释器先求出各个参数的值，然后将过程应用于参数，而采用
正则序时，则是先把过程全部展开，最后才求值。lisp采用应用序求值。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(sum-square (+1 2) (- 3 2))
</span><span class='line'>
</span><span class='line'>应有序求值过程：
</span><span class='line'>(sum-square (+1 2) (- 3 2))
</span><span class='line'>(sum-square 3 1)
</span><span class='line'>(+ (square 3) (square 1))
</span><span class='line'>(+ (* 3 3) (* 1 1))
</span><span class='line'>(+ 9 1)
</span><span class='line'>10
</span><span class='line'>
</span><span class='line'>正则序
</span><span class='line'>全部展开：
</span><span class='line'>(+   (square  (+ 1 2))    (square  (- 3 2)) )
</span><span class='line'>    
</span><span class='line'>(+   (* (+1 2) (+1 2))    (* (- 3 2) (- 3 2)))    
</span><span class='line'>归约：
</span><span class='line'>(+ (* 3 3) (* 1 1))
</span><span class='line'>(+ 9 1)
</span><span class='line'>10</span></code></pre></td></tr></table></div></figure>


<p>可以看到不同的代换模型求出来的值都是一样的，只是过程的区别，正则序需要
进行许多重复的计算，不过一些特殊的过程，并不是2种模型都适合的，所以虽
然lisp使用应用序，在一些特殊情况下还是需要正则序来完成计算的。书后面的
练习1.5就是个例子。</p>

<h3>过程产生的计算</h3>

<ul>
<li>递归和迭代</li>
</ul>


<p> 在lisp中 <strong>递归过程</strong> 可以产生 <strong>递归计算过程</strong> 也可以产生 <strong>迭代计算
 过程</strong>，并不需要像结构式语言那样显示借助于循环结构才能写出来迭代的计算过程。</p>

<p> 最简单的递归过程就是计算阶乘的例子,下面这个过程产生的计算是 <strong>线性递归计
 算过程</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(define (factorial n)
</span><span class='line'>     (if (= n 1)
</span><span class='line'>         1
</span><span class='line'>         (* n (factorial (- n 1)))))</span></code></pre></td></tr></table></div></figure>


<p> 迭代的计算过程都是可以用一定的 <strong>状态变量</strong> 描述的计算过程，所以产生
 迭代计算过程的 过程都要在计算中维持几个 状态变量，在计算阶乘的时就可以用维持一个 计数器counter，最大值n和 乘积product来描述，下
 面的过程产生的是 <strong>线性迭代计算过程</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(define (factorial n)
</span><span class='line'>     (define (iter counter product)
</span><span class='line'>         (if (> counter n)
</span><span class='line'>             product
</span><span class='line'>             (iter (+ counter 1) (* counter product))))
</span><span class='line'>     (iter 1 1))</span></code></pre></td></tr></table></div></figure>


<p> <strong>树形递归</strong>计算过程需要更多的计算步奏，使用递归算法计算斐波那契数列产生
 的就是 树形递归计算过程</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(define (fib n)
</span><span class='line'>    (cond ((= n 0) 0)
</span><span class='line'>          ((= n 1) 1)
</span><span class='line'>          (else (+ (fib (- n 1))
</span><span class='line'>                   (fib (- n 2))))))</span></code></pre></td></tr></table></div></figure>


<p> 可以使用产生迭代计算过程的方法来优化过程</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(define (fib n)
</span><span class='line'>    (define (iter a b counter) 
</span><span class='line'>        (if (> counter n)
</span><span class='line'>            b
</span><span class='line'>            (iter (+ a b) a (+counter 1))))
</span><span class='line'>    (iter 1 0 0))</span></code></pre></td></tr></table></div></figure>


<h3>使用高阶函数</h3>

<p>lisp中过程可以当作　<strong>第一级计算元素</strong>，也就是说过程具有这些权利:</p>

<ul>
<li><p>可以用变量命名</p></li>
<li><p>可以做为函数的参数</p></li>
<li><p>可以作为函数的返回值</p></li>
<li><p>可以包含在数据结构中</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>计算：f(x,y)=x(1+xy) + y(1-y) + (1+xy)(1-y)
</span><span class='line'> 利用辅助过程：
</span><span class='line'> (define (f x y)
</span><span class='line'>     (define (f2 a b)
</span><span class='line'>         (+ (* x a)
</span><span class='line'>             (* y b)
</span><span class='line'>              (* ab)))
</span><span class='line'>     (f2 (+ 1 (* x y))
</span><span class='line'>         (- 1 y)))
</span><span class='line'>         
</span><span class='line'> 利用lambda：
</span><span class='line'> (define (f x y)
</span><span class='line'>     ((lambda (a b)
</span><span class='line'>         (+ (* x a)
</span><span class='line'>             (* y b)
</span><span class='line'>             (* ab)))
</span><span class='line'>         (+ 1 (* x y))
</span><span class='line'>         (- 1 y)))
</span><span class='line'>         
</span><span class='line'> 利用let创建局部变量:
</span><span class='line'> (define (f x y)
</span><span class='line'>     (let ((a (+ 1 (* x y)))
</span><span class='line'>          (b (- 1 y)))
</span><span class='line'>          (+ (* x a) 
</span><span class='line'>              (* y b) 
</span><span class='line'>              (* a b))))</span></code></pre></td></tr></table></div></figure>


<h3>自己做的一些练习</h3>

<p>exer1.11:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>递归：
</span><span class='line'>(define (f n)
</span><span class='line'>    (if (&lt; n 3)
</span><span class='line'>        n
</span><span class='line'>        (+ (f (- n 1)
</span><span class='line'>            (* 2 (f (- n 2)))
</span><span class='line'>            (* 3 (f (- n 3)))))))
</span><span class='line'>
</span><span class='line'>迭代：
</span><span class='line'>(define (f n)
</span><span class='line'>    (define (iter a b c counter)
</span><span class='line'>        (if (&lt; counter 0)
</span><span class='line'>            c 
</span><span class='line'>            (iter b c (+ (* 3 a)
</span><span class='line'>                          (* 2 b)
</span><span class='line'>                          c) (- counter 1))))
</span><span class='line'>    (if (&lt; n 3)
</span><span class='line'>        n
</span><span class='line'>        (iter 0 1 2 (- n 3))))</span></code></pre></td></tr></table></div></figure>


<p>exer1.16:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(define (fast-expt b n)
</span><span class='line'>    (define (iter a b n)
</span><span class='line'>        (cond ((= n 0) a)
</span><span class='line'>              ((even? n) (iter a (square b) (/ n 2)))
</span><span class='line'>              (else (iter (* a b) b (- n 1)))))
</span><span class='line'>    (iter 1 b n))</span></code></pre></td></tr></table></div></figure>


<p>           <br/>
exer1.17:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(define (fast-product a b)
</span><span class='line'>    (cond ((= b 0) 0)
</span><span class='line'>          ((even? b) (double (fast-product a (/ b 2))))
</span><span class='line'>          (else (+ a (fast-product a (- b 1))))))</span></code></pre></td></tr></table></div></figure>


<p>         <br/>
exer1.18:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(define (fast-product a b)
</span><span class='line'>    (define (iter n a b)
</span><span class='line'>        (cond ((= b 0) n)
</span><span class='line'>              ((even? b) (iter n (double a) (/ b 2)))
</span><span class='line'>              (else (iter (+ n a) a (- b 1)))))
</span><span class='line'>     (iter 0 a b))</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[new start]]></title>
    <link href="http://shellfly.github.com/blog/2012/06/06/new-start/"/>
    <updated>2012-06-06T23:26:00+08:00</updated>
    <id>http://shellfly.github.com/blog/2012/06/06/new-start</id>
    <content type="html"><![CDATA[<p>就像现在所显示的，原来使用免费空间搭建的wordpress博客没有了，告诉我需要付费才能弄回来原来的空间。其实000webhost用着挺不错的，半年多了也没出
什么问题，虽然数据库有备份，但想想还是算了，从新开始也不错。之前因为电
脑出了点问题，修了很多天才弄好而且电脑被全盘格式化了，这次又来这个，貌似人品还没攒够？</p>

<p>shellfly.org这个域名要到10月份才到期，之后也不打算在续费了，所以以后如果想再来的话（虽然现在没什么东西，但
还是希望有人来看。。）就直接用shellfly.github.com吧。github真是个好东
西。</p>

<p>之前虽然一直想看看git的书，但一直没找到机会，反而这次搭建博客把git弄懂了一
点，理论上虽然还差一点，但简单的操作都ok了。ruby之前没接触过，所以今天在图书馆也借了本ruby的书，markdown也没用
过，这第一篇文章估计也不怎么好看，没什么格式，博客落下很久了，先写点试
试，好久没写东西了。前几天考完了软件设计师，感觉挺简单的（希望不是我感觉错误）等着拿证书，好像要等半年才
能出来。虽然这种考试看上去没什么用，不过乘此机会好好看了下算法和数据结构，还看了点编译原理，收获还是有的。</p>

<p>6月7号，今天正好是高考的日子，三年的时间就这么过去了，好像越长大，时间
过的越快？如果大二的时候没有下定决心不在玩游戏，不知道现在的自己是一副
什么样子。发现自己写文章果然没什么天赋啊，跳变太多了 看来大脑里都是数字信
号啊 什么时候能弄个D/A转换器 转换成模拟信号就好了…… 不管怎样，找到新起点的感觉也是不错的</p>
]]></content>
  </entry>
  
</feed>
