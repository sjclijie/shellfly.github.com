<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: memo | 翼をください]]></title>
  <link href="http://shellfly.github.com/blog/categories/memo/atom.xml" rel="self"/>
  <link href="http://shellfly.github.com/"/>
  <updated>2014-03-28T00:03:32+08:00</updated>
  <id>http://shellfly.github.com/</id>
  <author>
    <name><![CDATA[shellfly]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[raspberry pi wireless]]></title>
    <link href="http://shellfly.github.com/blog/2014/03/25/raspberry-pi-wireless/"/>
    <updated>2014-03-25T22:36:00+08:00</updated>
    <id>http://shellfly.github.com/blog/2014/03/25/raspberry-pi-wireless</id>
    <content type="html"><![CDATA[<p>前几天入手了Raspberry Pi，由于住的地方是无线路由，路由器又不在我的房间不方便接跟网线上去，想在家里玩的话就得把无线链接先配置好。</p>

<p>Raspberry Pi mode B国产红色的那款，操作系统raspbian wheezy 3.10，无线网卡用的edup的一款。</p>

<p>第一次进去当然还是要用网线才行，sshd是默认启动的，可以ssh进去，或者装个vnc server实现远程桌面，配置好了后就可以用自己的笔记本当显示器来用了。</p>

<p>使用raspbian自带的<u>wap_suppliant</u><sup><a href="#1">1</a></sup> 配置无线网络</p>

<!-- more -->


<pre><code>$ cat /etc/network/interfaces
auto lo

iface lo inet loopback
iface eth0 inet dhcp

allow-hotplug wlan0
iface wlan0 inet manual
wpa-roam /etc/wpa_supplicant/wpa_supplicant.conf
iface default inet dhcp 

$ cat /etc/wpa_supplicant/wpa_supplicant.conf
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
network={
    ssid="office-wifi"
    scan_ssid=1
    key_mgmt=WPA-PSK
    psk=""
    id_str="office-wifi-password"
    priority=5
}

network={
    ssid="home-wifi"
    scan_ssid=1
    key_mgmt=WPA-PSK
    psk="home-wifi-password"
    id_str="home"
    priority=5
}
</code></pre>

<p>配置好ssid和psk，插上电源启动raspberry就会自动连接到合适的无线网络了。进路由器管理界面可以看到连接设备里有个raspberrypi可以看到获得的ip。</p>

<p><a id="1">[1] <a href="http://hostap.epitest.fi/wpa_supplicant/">wpa_suppliant</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git history]]></title>
    <link href="http://shellfly.github.com/blog/2013/01/22/all-about-git-history/"/>
    <updated>2013-01-22T00:08:00+08:00</updated>
    <id>http://shellfly.github.com/blog/2013/01/22/all-about-git-history</id>
    <content type="html"><![CDATA[<h3>修改上一次commit</h3>

<p><code>git commit --amend</code>,如果上次提交后没有做任何修改，运行这个命令可以修改上次提交的message，如果你发现少提交了一个文件，或者有其他小的改动
觉得应该放在上一个commit里面，就可以在commit最后加上<code>--amend</code> 参数，来更新上次commit。</p>

<h3>查看历史记录 git log vs git reflog</h3>

<p>平时大家一般都习惯使用 <code>git log</code> 查看当前commit记录，但是默认只显示出当前的最新状态，如果一个commit被其他命令删除，这里是就看不见了。
<code>git reflog</code> 则记录了目前为止的所有动作，包括经过的所有commit。要想恢复一个被删除的commit,<code>git reflog</code> 是不二之选。<code>git reflog</code>
其实就是<code>git log -g --abbrev-commit --pretty=oneline</code>的一个alias。</p>

<h3>撤销commit git revert vs git reset</h3>

<!-- more -->


<p><code>git revert &lt;commit&gt;</code> 会创建一个新的commit,这个commit会撤销命令里给出的commit的所有操作，并且不会修改原有commit历史记录。要撤销最近一次commit最好的办法就是使用<code>git revert</code>。当然也可
以指定很多commit 这些commit会被一一撤销，如果有中间出现冲突，需要像<code>git merge</code>那样手动解决冲突。</p>

<p><code>git reset (--soft | --mixed | --hard | --merge | --keep) [-q] [&lt;commit&gt;]</code> 恢复到指定的commit，会修改commit的历史记录,可以回溯到任一commit,就像时光倒流一样，这也是版本控制的好处所在。</p>

<ul>
<li><p><code>--soft</code>
只是把当前HEAD指向commit，并不改变index和work tree里的文件，所有和commit不同的文件都会变成“changes to be commited”</p></li>
<li><p><code>--mixed</code>
默认选项，除了把HEAD指向commit外，还会更新index文件，但不影响work tree里的文件。</p></li>
<li><p><code>--hard</code>
把HEAD指向commit，并且更新index和work tree里的文件，如果想彻底删除一个commit，可以选择这个命令</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
