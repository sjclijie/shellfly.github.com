<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 翻译 | 翼をください]]></title>
  <link href="http://shellfly.github.com/blog/categories/fan-yi/atom.xml" rel="self"/>
  <link href="http://shellfly.github.com/"/>
  <updated>2015-01-08T00:08:59+08:00</updated>
  <id>http://shellfly.github.com/</id>
  <author>
    <name><![CDATA[shellfly]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[(译) The Y combinator (Slight Return)]]></title>
    <link href="http://shellfly.github.com/blog/2015/01/07/yi-the-y-combinator-slight-return/"/>
    <updated>2015-01-07T20:52:02+08:00</updated>
    <id>http://shellfly.github.com/blog/2015/01/07/yi-the-y-combinator-slight-return</id>
    <content type="html"><![CDATA[<p>or:</p>

<p><u>How to Succeed at Recursion Without Really Recursing</u></p>

<pre><code>Tiger got to hunt,
Bird got to fly;
Lisper got to sit and wonder, (Y (Y Y))?

Tiger got to sleep,
Bird got to land;
Lisper got to tell himself he understand.

  — Kurt Vonnegut, modified by Darius Bacon
</code></pre>

<!--more-->


<h2>介绍</h2>

<p>自从最近写了一篇关于Y combinator的文章后，收到了很多有用的评论，所以我觉得很适合把它在扩展一下，写一篇更完整的出来。这篇文章会说的更深入，但是我希望也能更好理解。你不需要先读完前一篇文章在读这篇（实际上你最好没读过），我需要的唯一的背景知识就是一点点Scheme编程语言包括递归和first-class functions，文章中我也会提到。欢迎（再一次）评论。</p>

<h2>为什么学习 Y combinator</h2>

<p>在详细的说明Y combinator到底是什么之前，我想先指出，为什么你，作为一个程序员，应该花时间来学习它。说实话，并没有什么实际的理由让你一定要学习Y combinator。尽管它的确有一点实际的作用，而且大部分是对于计算机语言学家们。尽管如此，我还是觉得你值得花时间来了解一点Y combinator的东西，因为：</p>

<ol>
<li><p>它是编程中最美的想法之一，如果你稍微有一点对于编程的审美，你一定会被Y combinator打动。</p></li>
<li><p>它以一种非常质朴的方式展现了函数式编程的简单想法是多么惊人和强大。</p></li>
</ol>


<p>1959年，英国科学家C. P. Snow做了一场有名的讲座叫 <strong><a href="http://en.wikipedia.org/wiki/The_Two_Cultures">The Two Cultures</a></strong> ,在讲座中他哀叹当时很多头脑聪明教育良好的人却对科学一无所知。他用热力学第二定律的知识作为可以认知科学和无法认知科学两种人的分界线。我想我们同样可以用Y combinator的知识作为了解函数式编程（也就是说，掌握充分函数式编程的知识）和不了解函数式编程的程序员之间的分界线。有一些其他工具也可以代替Y combinator很好的工作（尤其是monads），但是Y combinator会完成的更漂亮。所以如果你渴望知道真正的Lambda本质，那就继续读下去。</p>

<p>顺便提一下，<a href="http://www.paulgraham.com/">Paul Graham</a>(Lisp黑客，Lisp书籍作家，随笔作家，现在也是一名企业家)显然把Y combinator看的更重，他用<a href="http://www.ycombinator.com/">Y combinator</a>来命名他的创业孵化器公司。Paul通过这些知识变的富有，也许有其他人也会，也许甚至就是你。</p>

<hr />


<h2>一个谜题</h2>

<h2>阶乘</h2>

<p>我们通过定义几个计算阶乘的函数来开始我们的Y combinator之旅，一个非负整数的阶乘就是从1一直乘到它自己，所以我们有：</p>

<p class="indent">    factorial 1 = 1
    factorial 2 = 2 * 1 = 2
    factorial 3 = 3 * 2 * 1 = 6
    factorial 4 = 4 * 3 * 2 *1 = 24
</p>


<p>等等。（我在这里写函数时没有用括号，所以 factorial 3 和通常写的factorial(3)是一样的，真的，相信我。）阶乘随着n的增长增长的很快，20的阶乘是2432902008176640000。0的阶乘被定义成1，事实证明这对于实际使用阶乘的时候是个合适的定义（比如解决组合数学的问题）。</p>
]]></content>
  </entry>
  
</feed>
